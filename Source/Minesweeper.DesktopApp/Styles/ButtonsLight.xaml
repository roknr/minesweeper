<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Fonts.xaml"/>
        <ResourceDictionary Source="ColorsLight.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--
        NOTE: this style is a copy that exists per theme dictionary, it is needed because it is not possible to dynamically change
              a ColorAnimation's "To" property with "Binding" or as a "DynamicResource".
              When using it, the style must be specified as a "DynamicResource" and have the same name throughout the application.
        TODO: try to find a better way of doing this - this is duplicating code
    -->

    <!-- The window header button style -->
    <Style x:Key="WindowHeaderButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource FontStyleControlBase}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Foreground" Value="{StaticResource WindowHeaderForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            Width="{TemplateBinding ActualHeight}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   Text="{TemplateBinding Content}"
                                   FontFamily="{StaticResource FontAwesome}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- When the mouse is pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource PrimaryColorLighterBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource PrimaryColorTextForegroundBrush}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <!-- When the mouse enters the button, the background animates -->
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.15"
                                            To="{StaticResource WindowHeaderButtonBackgroundHover}"
                                            Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <!-- When the mouse leaves the button, the background animates back -->
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.15"
                                            Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                                            FillBehavior="Stop"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- The application repeat button style -->
    <Style x:Key="RepeatButtonDefaultStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <Border x:Name="border"
							CornerRadius="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
							Width="{TemplateBinding ActualHeight}"
							SnapsToDevicePixels="True"
							Cursor="Hand"
							Background="{StaticResource BackgroundBrush}">
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- When the mouse is pressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource BackgroundPressedBrush}"/>
                        </Trigger>

                        <!-- When the mouse enters the button, the background animates -->
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"
                                                    To="{StaticResource BackgroundHover}"
                                                    Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <!-- When the mouse leaves the button, the background animates back -->
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"
                                                    FillBehavior="Stop"
                                                    Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>