# To learn more about .editorconfig see https://aka.ms/editorconfigdocs

###############################
# Core EditorConfig Options   #
###############################

# All files use space for indentation
[*]
indent_style = space

# C# Code files use 4 spaces
[*.cs]
indent_size = 4
insert_final_newline = true
charset = utf-8


###############################
# Naming Conventions          #
###############################

# Static fields and properties are PascalCase
dotnet_naming_rule.static_fields_pascal.severity = error
dotnet_naming_rule.static_fields_pascal.symbols = static_fields_pascal_symbols
dotnet_naming_rule.static_fields_pascal.style = static_fields_pascal_style
dotnet_naming_style.static_fields_pascal_style.capitalization = pascal_case
dotnet_naming_symbols.static_fields_pascal_symbols.applicable_kinds = field
dotnet_naming_symbols.static_fields_pascal_symbols.required_modifiers = static

# Use 'm' prefix for fields and PascalCase
dotnet_naming_rule.members_start_with_m.severity = error
dotnet_naming_rule.members_start_with_m.symbols = members_start_with_m_symbols
dotnet_naming_rule.members_start_with_m.style = members_start_with_m_style
dotnet_naming_style.members_start_with_m_style.capitalization = pascal_case
dotnet_naming_style.members_start_with_m_style.required_prefix = m
dotnet_naming_symbols.members_start_with_m_symbols.applicable_kinds = field
dotnet_naming_symbols.members_start_with_m_symbols.required_modifiers = private,internal,private,protected,protected_internal

# Suffix async methods with "Async", use PascalCase
dotnet_naming_rule.async_methods_must_end_with_async.severity = error
dotnet_naming_rule.async_methods_must_end_with_async.symbols = async_methods_must_end_with_async_symbols
dotnet_naming_rule.async_methods_must_end_with_async.style = async_methods_must_end_with_async_style
dotnet_naming_symbols.async_methods_must_end_with_async_symbols.applicable_kinds = method
dotnet_naming_symbols.async_methods_must_end_with_async_symbols.required_modifiers = async
dotnet_naming_style.async_methods_must_end_with_async_style.capitalization = pascal_case
dotnet_naming_style.async_methods_must_end_with_async_style.required_suffix = Async

# Enums and properties use PascalCase
dotnet_naming_rule.properties_pascal.severity = error
dotnet_naming_rule.properties_pascal.symbols = properties_pascal_symbols
dotnet_naming_rule.properties_pascal.style = properties_pascal_style
dotnet_naming_style.properties_pascal_style.capitalization = pascal_case
dotnet_naming_symbols.properties_pascal_symbols.applicable_kinds = property,enum

# Others use PascalCase
dotnet_naming_rule.class_pascal.severity = error
dotnet_naming_rule.class_pascal.symbols = class_pascal_symbols
dotnet_naming_rule.class_pascal.style = class_pascal_style
dotnet_naming_style.class_pascal_style.capitalization = pascal_case
dotnet_naming_symbols.class_pascal_symbols.applicable_kinds = class,interface,struct,method,event,delegate


###############################
# C# Coding Conventions       #
###############################

# Organize using statements
dotnet_sort_system_directives_first = true

# Never use "this."
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Never use framework type names - use "string" instead of "String"
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Always require modifiers, in specific order
dotnet_style_require_accessibility_modifiers = always:error
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error

# Try using readonly field where possible
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:error
dotnet_style_collection_initializer = true:error
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_prefer_inferred_tuple_names = true:suggestion
dotnet_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# Use "{ }" for methods, constructors, operators
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent

# Use "=>" for properties, indexers, accessors
csharp_style_expression_bodied_properties = true:error
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:error

# Pattern matching preferences
#   if (o is int i) {...}
# instead of
#   if (o is int) {var i = (int)o; ... }
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error

# Null-checking preferences
#   if (o is string s) {...}
# instead of
#   var s = o as string;
#   if (s != null) {...}
csharp_style_throw_expression = true:error
csharp_style_conditional_delegate_call = true:error

# Expression-level preferences
csharp_prefer_braces = true:silent
csharp_style_deconstructed_variable_declaration = true:suggestion

# Use "default" instead of "default(type)"
csharp_prefer_simple_default_expression = true:error

# Use local instead of anonymous functions
csharp_style_pattern_local_over_anonymous_function = true:silent

# Use inline variable declaration
#   if (int.TryParse(value, out int i) {...}
# instead of
#   int i;
#   if (int.TryParse(value, out i) {...}
csharp_style_inlined_variable_declaration = true:error


###############################
# C# Formatting Rules         #
###############################

# Use new lines everywhere
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indent case, switch statements
csharp_indent_case_contents = true
csharp_indent_switch_labels = true

# Use default VS setting for labels
csharp_indent_labels = no_change

# Space preferences

# No spaces after casts
csharp_space_after_cast = false

# for (int i; i<x; i++) { ... }
#    ^
csharp_space_after_keywords_in_control_flow_statements = true

# MyMethod(argument);
#         ^^
csharp_space_between_method_call_parameter_list_parentheses = false

# void Bark(int x) { ... }
#          ^^
csharp_space_between_method_declaration_parameter_list_parentheses = false

csharp_space_between_parentheses = false

# class C : I
#        ^
csharp_space_before_colon_in_inheritance_clause = true

# class C : I
#          ^
csharp_space_after_colon_in_inheritance_clause = true

# x * (x - y)
csharp_space_around_binary_operators = before_and_after

# void Goo()
#         ^^
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false

# Goo(1)
#    ^^^
csharp_space_between_method_call_name_and_opening_parenthesis = false

# Goo()
#    ^^
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# OK to use in single line
#   int i = 0; string name = "John";
csharp_preserve_single_line_statements = true

# OK to use in single line
#   public int Goo { get; set; }
csharp_preserve_single_line_blocks = true